11/3/2023

1. Static (tĩnh):
 - Sử dụng để khai báo các thuộc tính và phương thức của lớp (không trực thuộc đối tượng);
 - Phương thức static chỉ có thể gọi các phương thức static khác.
 - Truy xuất biến static ( ko thể dùng this và super)
 - Có thể khởi tạo các dữ liệu static thông qua khối khởi tạo static.

2. Public : tất cả các lớp, đối tượng đều truy cập đc.
3. Private: thuộc tính và phương thức được tạo từ private chỉ có lớp đó truy cập, còn lại đều ko truy cập đc
4. Protected : có thể truy cập đc bởi tất cả các lớp (cùng package), lớp con (trong, ngoài package). Không thể sử dụng tham chiếu
5. Default : phạm vi truy cập chỉ nằm trong gói package.

Các phương thức được khai báo public trong một lớp cha cũng phải là public trong tất cả lớp phụ.

Các phương thức được khai báo protected trong một lớp cha phải hoặc là protected hoặc public trong các lớp phụ; chúng không thể là private.

Các phương thức được khai báo mà không có điều khiển truy cập (không sử dụng modifier nào) có thể được khai báo private trong các lớp phụ.

Các phương thức được khai báo private không được kế thừa, do đó không có qui tắc nào cho chúng.

6. Package (gói) : 

Java package được sử dụng để phân loại các lớp và các interface để mà chúng có thể được duy trì dễ dàng hơn.

Java package cung cấp bảo vệ truy cập.

Java package xóa bỏ các xung đột về đặt tên.

7. Extends : khai báo kế thừa
8. instanceof : toán tử kiểm tra kiểu đối tượng trả về kiểu boolean.
9. final : từ khóa áp dụng cho lớp ( ngăn ngừa kế thừa và ghi đè phương thức)


 + Import : lớp và đối tượng của package khác truy cập tới package hiện tại.
  - tenpackage.* : truy cập tất cả.
  - tenpackage.tenlop: truy cập đến lớp có tên tenlop.
10. 
	Cài đè (overriding) : cùng tên cùng kiểu cùng tham số
	Nạp chồng (overloading) : cùng tên ( khác kiểu hoặc tham số)

11. Kế thừa, đa hình: 

Lớp con chuyên biệt hóa lớp cha của nó.

Lớp con thừa kế tất cả các biến thực thể và phương thức public của lớp cha, nhưng không thừa kế các biến thực thể và phương thức private của lớp cha.

Có thể cài đè các phương thức được thừa kế; không thể cài đè các biến thực thể được thừa kế (tuy có thể gán trị lại tại lớp con, nhưng đây là hai việc khác nhau)

Để gọi phiên bản phương thức của lớp cha từ trong lớp con, sử dụng từ khóa super làm tham chiếu tới lớp cha.

12. Từ khóa This: 
	+ Ánh xạ đối tượng khi cần sử dụng.
	+ Gọi lại giá trị biến trong hàm tạo.

	vd: public class Person {
		public String name;
		public int age;
		public double height;	
		public Person(String name){
			this.name = name;
		}
		public Person(String name, int age){
			this(name);
			this.age = age;
		}
		public Person(String name, int age, double height){
			this(name, age);
			this.height = height;
		}
	}

14/3/2023

1. Abstract class: 
	+ Không thể tạo đối tượng của lớp abstract.
	+ Lớp chứa abstract method bắt buộc phải là abstract class.
	+ subclass abstract kế thừa superclass abstract => thực hiện toàn bộ abstract method.
	+ if (class or method is abstract) else (no final).
	+ Abstract Method: chỉ có phần khai báo, không có phần thân.
Cú pháp:
	+ Class: [Access Modifier] abstract class TenLop (){}
	+ Method: [Access Modifier] abstract [method] tenPhuongThuc (){}

2. Interface: 
	+ Tương tự như class (chỉ chứa constanst và abstract method), quy định các hành vi chung các lớp triển khai nó.
	+ Có thể kế thừa Interface khác.

Cú pháp: 
	
	+ Khai báo: [modifier] interface ITen {};
			[modifier] interface ITen1 {};

	+ Sử dụng (1 lớp kế thừa 1 hoặc nhiều interface): [modifier] class TenLop implement ITen, Iten1 () {}
	

16/3/2023

1. Stack:
	+ push(): thêm 1 phần tử cần lưu giữ vào ngăn xếp.
	+ pop(): xóa một phần tử từ ngăn xếp.
	+ peek(): lấy phần tử đầu tiên từ ngăn xếp mà không xóa phần tử này.
	+ isFull(): ktra ngăn xếp đầy hay không.
	+ isEmpty(): ktra ngăn xếp trống hay không.

20/3/2023

1. Sets : lưu trữ một nhóm các phần tử không có phần tử nào trùng nhau.

2. Lists: lưu trữ một tập các phần tử có thứ tự.

3. Stacks: lưu trữ tập các đối tượng được xử lý theo dạng last-in, first-out.

4. Queues: lưu trữ tập các đối tượng được xử lý theo dạng first-in, first-out.

5. PriorityQueues: lưu trữ tập các đối tượng được xử lý theo thứ tự ưu tiên của chúng. 


6. Search Algorithm:
	+ Tìm kiếm tuần tự hay còn được gọi là tìm kiếm tuyến tính là một giải thuật tìm kiếm cơ bản và đơn giản nhất đối với lập trình viên.
	+ Tìm kiếm nhị phân là một loại thuật toán tìm kiếm nâng cao để tìm và lấy dữ liệu từ danh sách các phần tử đã được sắp xếp (chia đôi dữ liệu trong danh sách cho đến khi giá trị yêu cầu được tìm thấy).

7. Sort Algorithm :
	- Sắp xếp nổi bọt (Bubble Sort):

		+ Xuất phát từ cuối dãy, đổi chỗ các cặp phần tử kế cận để đưa phần tử nhỏ hơn trong cặp phần tử đó về vị trí đầu dãy hiện hành, sau đó sẽ không xét đến nó ở bước tiếp theo

		+ Ở lần xử lý thứ i có vị trí đầu dãy là i

		+ Lặp lại xử lý trên cho đến khi không còn cặp phần tử nào để xét

		+ Độ phức tạp thuật toán

			Trường hợp tốt: O(n)
			Trung bình: O(n^2)
			Trường hợp xấu: O(n^2)

	- Sắp xếp chọn (Selection Sort):

		+ Chọn phần tử nhỏ nhất trong n phần tử ban đầu, đưa phần tử này về vị trí đúng là đầu dãy hiện hành

		+ Xem dãy hiện hành chỉ còn n-1 phần tử của dãy ban đầu, bắt đầu từ vị trí thứ 2; lặp lại quá trình trên cho dãy hiện hành... đến khi dãy hiện hành chỉ còn 1 phần tử

		+ Độ phức tạp thuật toán

			Có độ phức tạp so sánh là O(n2) (n2/2 phép so sánh).
			Thuật toán tốn thời gian gần như bằng nhau đối với mảng đã được sắp xếp cũng như mảng chưa được sắp xếp.

	- Sắp xếp chèn (Insertion Sort):

		+ Tìm cách chèn phần tử a[i] vào vị trí thích hợp của đoạn đã được sắp để có dãy mới a[0] , a[1] ,... , a[i-1] trở nên có thứ tự

		+ Vị trí này chính là pos thỏa : a[pos-1] <= a[i ]< a[pos] (1 <= pos <= i)
		
		+ Độ phức tạp thuật toán
			
			Trường hợp tốt: O(n)
			Trung bình: O(n^2)
			Trường hợp xấu: O(n^2)

8. Ngoại lệ (Exception): 

Tất cả các lớp exception đều là lớp con của lớp java.lang.Exception

Lớp exception là lớp con của lớp Throwable. 

Một loại lớp exception khác là Error cũng là lớp con của lớp Throwable.

Có các ngoại lệ sau: 
	
	- Checked Exception:  Là ngoại lệ thường xảy ra do người dùng mà không thể lường trước được bởi lập trình viên.
	- Unchecked Exception: Một ngoại lệ xảy ra ở runtime là ngoại lệ có thể tránh được bởi lập trình viên.
	- Error: Nó không giống các exception, nhưng vấn đề xảy ra vượt quá tầm kiểm soát của lập trình viên hay người dùng. Error được bỏ qua trong code của bạn vì bạn hiếm khi có thể làm gì đó khi chương trình bị error.
	- Xử lý ngoại lệ (Exception Handling) là một kỹ thuật để xử lý các Runtime Error như ClassNotFound, IO, SQL, Remote, …  

Các phương thức trong Exception:

	+ public String getMessage(): Trả về một message cụ thể về exception đã xảy ra. Message này được khởi tạo bởi phương thức constructor của 			Throwable.

	+ public Throwable getCause(): Trả về nguyên nhân xảy ra exception biểu diễn bởi đối tượng Throwable

	+ public String toString(): Trả về tên của lớp và kết hợp với kết quả từ phương thức getMessage().

	+ public void printStackTrace(): In ra kết quả của phương thức toString cùng với stack trace đến System.err.

Có 5 từ khóa được sử dụng để Xử lý ngoại lệ trong Java, đó là:

	+ try : Sử dụng để chứa đoạn lệnh có thể gây ra ngoại lệ, nó phải được theo sau bởi khối catch hoặc finally

	+ catch : Sử dụng để xử lý ngoại lệ, các khối code để xử lý ngoại lệ sẽ được đặt trong đây

	+ finally : Sử dụng để thực thi đoạn mã cần thiết của chương trình (Khối này sẽ luôn được thực thi)

	+ throw : Sử dụng để ném ra ngoại lệ

	+ throws : Sử dụng để khai báo ngoại lệ

21/03/2023:

1. Lớp file: 

	Không sử dụng tên file tuyệt đối trong chương trình của bạn. Nếu bạn sử dụng tên file như c:\\book\\Welcome.java, nó sẽ hoạt động trên Windows nhưng không hoạt động trên các nền tảng khác. Bạn nên sử dụng một tên file tương đối với thư mục hiện tại.

	VD: java.io.File file = new java.io.File("image/us.gif")

2. Lớp OutputStream:  System.out: output stream tiêu chuẩn

	Lớp OutputStream là một lớp trừu tượng. Nó là super class của tất cả các lớp đại diện cho một output stream của các byte. Một output stream chấp nhận ouput các byte và gửi chúng đến một nơi có thể chứa.

	Các phương thức:

		+ public void write(int)throws IOException : được sử dụng để ghi một byte đến output stream hiện tại.

		+ public void write(byte[])throws IOException : được sử dụng để ghi một mảng các byte đến output stream hiện tại.

		+ public void flush()throws IOException : flush output stream hiện tại.

		+ public void close()throws IOException : được sử dụng để đóng output stream hiện tại.

3. Lớp InputStream: System.in: input stream tiêu chuẩn

	Lớp InputStream là một lớp trừu tượng. Nó là super class của tất cả các lớp đại diện cho một input stream của các byte.

	Các phương thức:

		+ public abstract int read()throws IOException : Đọc byte kế tiếp của dữ liệu từ input stream. Nó trả về -1 khi đọc đến vị trí cuối tập tin.

		+ public int available()throws IOException : Trả về một ước tính về số byte có thể đọc được từ input stream hiện tại.

		+ public void close()throws IOException : được sử dụng để đóng input stream hiện tại.
